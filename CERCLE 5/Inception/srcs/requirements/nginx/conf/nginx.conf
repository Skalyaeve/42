# On définit l'utilisateur sous lequel NGINX exécutera le processus.
# Il doit avoir les droits sur les fichiers qu'il doit lire / écrire.
user				nginx;

# On définit le nombre de processus de travail à utiliser.
worker_processes	auto;

# On définit l'optimisation JIT pour les expressions régulières PCRE
# Ainsi, notre serveur devrait traiter plus efficacement les expressions PCRE.
# ( ex : "\.php$" (de "location ~ \.php$") est une expression PCRE.
# Elle indique à Nginx de traiter les requêtes qui correspondent à une URL se terminant par .php. )
pcre_jit			on;

# On indique où stocker les logs d'erreurs.
# Ainsi que le niveau d'erreur minimum pouvant apparaître dans les logs.
error_log			/var/log/nginx/error.log	warn;

# Cette directive inclut les modules disponibles.
# Notre serveur n'en utilise aucun.
#include			/etc/nginx/modules/*.conf;

# On configure la gestion des "événements" Nginx.
# C'est-à-dire : comment le serveur gère les connexions.
events
{
	# On définit le nombre de connexions maximal pour chaque processus de travail.
	worker_connections	1024;
}

# On détermine le comportement du serveur vis-à-vis des requêtes HTTP(S).
http
{
	# On inclut les types de MIME définis.
	# Ainsi, le serveur pourra correctement associer nos fichiers au type de contenu demandé.
	# ex : associer ".jpg" au type de contenu fichier.jpg.
	include						/etc/nginx/mime.types;

	# On définit le type de MIME par défaut.
	# Le flux d'octets est le plus générique.
	default_type				application/octet-stream;

	# On définit l'affichage des informations de version NGINX dans les en-têtes de réponses.
	server_tokens				off;

	# On définit la taille maximale de requête acceptée (en MO).
	client_max_body_size		10m;

	# On définit l'envoi de fichiers par sendfile().
	# La fonction système sendfile permet le transfert direct de données vers le socket réseau.
	# Autrement, NGINX devrait d'abord les charger en mémoire.
	sendfile					on;

	# On définit l'optimisation TCP_NOPUSH.
	# Optimise le transfert de données sur le réseau.
	# Les paquets sont envoyés complets plutôt que fragmenter.
	tcp_nopush					on;

	# On définit les protocoles SSL pris en charge.
	ssl_protocols				TLSv1.2 TLSv1.3;

	# Cette directive définit l'emplacement du fichier de paramètres Diffie-Hellman.
	# Algorithme de cryptage de clé publique SSL, pour plus de sécurité.
	#ssl_dhparam /etc/ssl/nginx/dh2048.pem;

	# On définit l'utilisation des algorithmes de chiffrement préférés du serveur.
	# ON = Aglo préférés du serveur / OFF = Algo préférés du client.
	ssl_prefer_server_ciphers	on;

	# On définit la taille de la cache de session SSL partagée.	
	ssl_session_cache			shared:SSL:2m;

	# On définit la durée d'une session SSL.
	ssl_session_timeout			1h;

	# On définit l'utilisation des tickets SSL.
	# Plus de performances, moins de sécurité.
	ssl_session_tickets			on;

	# On définit la compression GZIP des réponses.
	# Compression de la taille des réponses.
	gzip						on;

	# On définit l'envoie de l'en-tête "Vary".
	# Peut améliorer les performances en aidant le cache à mieux gérer les réponses compressées.
	gzip_vary					on;

	# On définit la stratégie de mise à niveau de connexion.
	# Inutile ici, notre serveur ne définit aucune mise à niveau vers WebSocket ou autre. 
	#map $http_upgrade $connection_upgrade 
	#{
	#	default upgrade;
	#	'' close;
	#}

	# On définit le format des logs d'accès.
	# 'IP - User [ time ] - Requête - Statut - Taille - URL - Navigateur - IP du dernier serveur ou par-feu ayant traité la requête'
	log_format					main
								'$remote_addr - $remote_user [$time_local] "$request" '
								'$status $body_bytes_sent "$http_referer" '
								'"$http_user_agent" "$http_x_forwarded_for"';

	# On indique où stocker les logs d'accès, et le type de ce dernier.
	access_log					/var/log/nginx/access.log	main;

	# On inclus les serveurs définis.
	include						/etc/nginx/http.d/*.conf;
}
